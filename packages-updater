#!/usr/bin/perl

use File::Spec::Functions qw(rel2abs);
use File::Basename;

$DIR = dirname(rel2abs($0));

require "$DIR/packages-updater-config.pl";


## BEGIN SCRIPT ##

# Are we root?
my $isroot = 0;
if (`whoami` =~ m/root/){ $isroot = 1; }

if (!$isroot){
	print "Sorry, you are not root!\n";
	exit 1; # return failure
}


# Prepend script dir to paths
# HACK - assumes script called 'packages-updater'
my $dir = $0;
$dir =~ s/packages-updater$//;
my $blacklistfile = "$DIR/$blacklistfile";
my $logfile = $logfile;
my $portageargs = "--newuse --nospinner";
my $nocolor = "--color=n";


# Put date in the log
if ($dolog){
	`echo \`date\` >> $logfile`;
}


# Read list of packages to not update
open BLACKLIST, $blacklistfile or die $!;
my @blacklist = <BLACKLIST>;
close BLACKLIST;
chomp @blacklist;


# Update the portage tree
if ($doSync){
	print "Syncing portage tree...";
	`emerge --sync &> /dev/null`;
	print "Done.\n";
}


# update the layman managed overlays
if ($doLayman){
	print "Syncing overlays...";
	`layman -S &> /dev/null`;
	print "Done\n";
}


# update the metadata if sync wasn't performed
if ($doMetadata && !$doSync){
	print "Updating portage metadata...";
	`emerge --metadata &> /dev/null`;
	print "Done.\n";
}


# update the eix database
if ($doEix){
	print "Updating eix cache...";
	`eix-update &> /dev/null`;
	print "Done.\n";
}


print "Getting list of updated packages...";
# do a pretend merge to get list of packages
my $packagepretend = `emerge -qpuD --accept-properties=-interactive $portageargs $nocolor world`;
my @packagedata = split("\n", $packagepretend);
my @packagelist;


# grab list of v9999 packages
if ($do9999s){
	my $v9999s = join(" ", split("\n", `qlist -ICq 9999`));
	my @atoms = split("\n", `emerge -pq --nospinner --accept-properties=-interactive $nocolor $v9999s`);
	push @packagedata, @atoms;
}


# grab package names from emerge output
for (my $i=0; $i <= $#packagedata; $i++){
	if ($packagedata[$i] =~ m/^\[ebuild .*?\] (.*?)((\s\[)|$)/i){
		push @packagelist, $1;
	}
}


# keep only unique items on the list
my %seenitems = ();
foreach (@packagelist){
	$seenitems{$_} = 1;
}
@packagelist = keys %seenitems;


# clip off blacklisted items
my @updatelist;
my @blackpackages;
for(my $i=0; $i <= $#packagelist; $i++){
	$_ = $packagelist[$i];
	my $blacklisted = 0;
	for (my $k=0; $k <= $#blacklist; $k++){
		if (m/$blacklist[$k]/i){
			$blacklisted = 1;
			last;
		}
	}
	if (!$blacklisted){ push @updatelist, $_; }
	else{ push @blackpackages, $_; }
}
print "Done.\n\n";

if ($#updatelist) {
	print "No packages to be updated!\n\n";
	if ($dolog){
		`echo \`date\` >> $logfile`;
		`echo >> $logfile`;
	}
	exit;
}

# show a list of packages to be updated
my $atoms = "=".join(" =", @updatelist);
print "Packages that will be updated:\n";
system "emerge -pq1 --nodeps --nospinner --accept-properties=-interactive $atoms";

# perform updates
print "\nUpdating packages...\n";
if ($dolog){
	foreach (@updatelist){
		`echo $_ >> $logfile`;
	}
}
system "emerge -q1 --nodeps --nospinner --accept-properties=-interactive --keep-going --jobs=$jobs $atoms";
print "Done updating packages.\n";


print "\nFetching remaining packages...";
`emerge -qfuD $portageargs $nocolor world &> /dev/null`;
print "Done.\n";


# update config files if enabled
if ($cfgUpdate){
	print "Updating config...";
	system "cfg-update -ua &> /dev/null";
	print "Done.\n\n";
	system "cfg-update -l";
}


# if there are blacklisted packages with updates, show them
if ($#blackpackages >= 0){
	print "\n";
	print "Blacklisted packages have updates:\n";
	my $blackatoms = "=".join(" =", @blackpackages);
	system "emerge -pq --nodeps --nospinner $blackatoms";
	print "\n";
}

print "\nRemaining package updates:\n";
system "emerge -pquD $portageargs world";
print "\n";


if ($dolog){
	`echo \`date\` >> $logfile`;
	`echo >> $logfile`;
}
