#!/usr/bin/perl
use strict;


## CONFIG ##

# run emerge --sync first
my $doSync = 1;

# update overlays using layman -S
# requires app-portage/layman
my $doLayman = 0;

# run eix update after sync
my $doEix = 0;

# re-merge 9999 version packages so they are updated too
# requires qlist from app-portage/portage-utils
my $do9999s = 0;

# fetch all, even if we won't install later
my $doFetch = 0;

# Do pretend merges for each package during install
my $doPretend = 0;

# Use cfg-update to do automatic config updates
# requires app-portage/cfg-update
my $cfgUpdate = 0;

# extra arguments to pass to portage, probably don't need to change this
# it is highly recommended to keep --newuse
my $portage_extra_args = "--newuse";

#Where is the log file kept?
my $dolog = 0;
my $logfile = "/var/log/update-log";

# Where is the package blacklist kept?
# Packages on the blacklist will be fetched for you
my $blacklistfile = "./packages.noupdate";

## END CONFIG ##


## BEGIN SCRIPT ##

# Are we root?
my $isroot = 0;
if (`whoami` =~ m/root/){ $isroot = 1; }

#If not root, we must be in portage group, or this is pointless
if (!$isroot and !(`groups` =~ m/portage/)){
	print "Sorry, you are not root or in the portage group.\n";
	exit 0; # return failure
}


my $dir = $0;
$dir =~ s/packages-updater$//;
$blacklistfile = $dir.$blacklistfile;


# Put date in the log
if ($dolog){
	`echo \`date\` >> $logfile`;
}


# Read list of packages to not update
my @blacklist = split("\n", `cat $blacklistfile`);


# Update the portage tree
if ($doSync and $isroot and !$doPretend){
	print "Syncing portage tree...";
	`emerge --sync &> /dev/null`;
	if ($dolog){
		`echo 'Synced portage tree' >> $logfile`;
	}
	print "Done.\n";
}


# update the layman managed overlays
if ($doLayman and $isroot and !$doPretend){
	print "Syncing overlays...";
	`layman -S &> /dev/null`;
	if ($dolog){
		`echo 'Synced overlays' >> $logfile`;
	}
	print "Done\n";
}


# update the eix database
if (($doSync or $doLayman) and $doEix and !$doPretend){
	print "Updating eix cache...";
	`eix-update &> /dev/null`;
	if ($dolog){
		`echo 'Updated eix cache' >> $logfile`;
	}
	print "Done.\n";
}


# Fetch all new packages in world, even if they are blacklisted from install
# don't check isroot, because users in portage group can do fetching
if ($doFetch and !$doPretend){
	print "Fetching packages...";
	`emerge -qfuD --nospinner --with-bdeps=y --color=n $portage_extra_args world &> /dev/null`;
	if ($dolog){
		`echo 'Fetched all packages' >> $logfile`;
	}
	print "Done.\n";
}



print "Getting list of updated packages...";

# do a pretend merge to get list of packages
my $packagepretend = `emerge -qpuD --nospinner --with-bdeps=y --color=n $portage_extra_args world`;
my @packagedata = split("\n", $packagepretend);
my @packagelist;

# grab package names from emerge output
for (my $i=0; $i <= $#packagedata; $i++){
	if ($packagedata[$i] =~ m/^\[ebuild .*?\] (.*?)((\s\[)|$)/i){
		push @packagelist, $1;
	}
}

# grab list of v9999 packages & deps
if ($do9999s){
	my $v9999s = join(" ", split("\n", `qlist -ICq 9999`));
	my @atoms = split("\n", `emerge -qp1 --with-bdeps=y --nospinner --color=n $v9999s`);
	foreach (@atoms){
		if ($_ =~ m/^\[ebuild .*?\] (.*?)((\s\[)|$)/i){
			push @packagelist, $1;
		}
	}
}

# keep only unique items on the list
my %seenitems = ();
foreach (@packagelist){
	$seenitems{$_} = 1;
}
@packagelist = keys %seenitems;

# clip off blacklisted items
my @updatelist;
my @blackpackages;
for(my $i=0; $i <= $#packagelist; $i++){
	$_ = $packagelist[$i];
	my $blacklisted = 0;
	for (my $k=0; $k <= $#blacklist; $k++){
		if (m/$blacklist[$k]/i){
			$blacklisted = 1;
			last;
		}
	}
	if (!$blacklisted){ push @updatelist, $_; }
	else{ push @blackpackages, $_; }
}
print "Done.\n\n";


# if there are blacklisted packages with updates, show them
if ($#blackpackages >= 0){
	print "Blacklisted packages have updates:\n";
	my $blackatoms = "=".join(" =", @blackpackages);
	system "emerge -pq1 --nodeps --nospinner --nodeps $blackatoms";
	print "\n";
}


if ($#updatelist < 0){
	print "No updates to do, exiting.\n";
	exit;
}


# show a list of packages to be updated
my $atoms = "=".join(" =", @updatelist);
print "Packages that will be updated:\n";
system "emerge -pq1 --nodeps --nospinner $atoms";
if ($dolog){
	foreach (@updatelist){
		`echo $_ >> $logfile`;
	}
}


# perform updates
if ($isroot and !$doPretend){
	print "\nUpdating packages...\n";
	system "emerge -q1 --nodeps --nospinner --keep-going $atoms";
	print "\nDone updating packages.\n";
}


# update config files if enabled and not user
if ($isroot and $cfgUpdate and !$doPretend){
	print "Updating config...";
	system "cfg-update -ua > /dev/null";
	if ($dolog){
		`echo 'Auto-updated config' >> $logfile`;
	}
	print "Done.\n";
}


if ($dolog){
	`echo \`date\` >> $logfile`;
	`echo >> $logfile`;
}
